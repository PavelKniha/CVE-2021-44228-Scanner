package com.logpresso.scanner;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Inet4Address;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.UnknownHostException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.List;
import java.util.Scanner;

public class CSVReportWriter {

	private PrintWriter reportFileWriter;
	private Path reportFullPath;
	private Path sensReportFullPath;
	private List<String> headers = Arrays.asList("Organization", "Hostname", "IP", "Path", "Log4j version", "OS name", "Classification");
	private String hostname = "";
	private String ipAddr = "";
	private String OSName = System.getProperty("os.name");
	private String blueId = "";
	private boolean sensitiveData = false;
	private String reportDir;
	private String sensitiveReportDir;
	private String timeStamp;
	private PrintWriter sensReportFileWriter;
	private boolean redactIP = false;
	private boolean redactHostname = false;


	public CSVReportWriter(String blueID, boolean redactIP, boolean redactHostname) throws IOException {
		this.blueId = blueID;
		this.redactIP = redactIP;
		this.redactHostname = redactHostname;
		this.sensitiveData = (redactIP || redactHostname);
		this.hostname = getHostname();
		this.ipAddr = getIP();
		this.timeStamp = new SimpleDateFormat("yyyyMMddHHmmss").format(Calendar.getInstance().getTime());
		
		this.reportDir = System.getProperty("user.dir") + System.getProperty("file.separator") + "report";

		createMissingDirs(reportDir);

		String reportFileName = "log4jScanner." + hostname.replace(".", "-") + "." + timeStamp + ".csv";
		this.reportFullPath = Paths.get(this.reportDir, reportFileName);
		this.reportFileWriter = new PrintWriter(reportFullPath.toString());

		
		if(sensitiveData) {
			this.sensitiveReportDir = this.reportDir + System.getProperty("file.separator") + "sensitiveReport";
			
			createMissingDirs(sensitiveReportDir);
			
			String sensitiveReportFileName = "log4jScanner." + (redactHostname ? "redacted" : hostname.replace(".", "-")) + "."  + timeStamp + ".csv";
			this.sensReportFullPath = Paths.get(this.sensitiveReportDir, sensitiveReportFileName);
			this.sensReportFileWriter = new PrintWriter(sensReportFullPath.toString());
		}
		
	}

	public void createMissingDirs(String filenName) {
		File reportDir = new File(filenName);
		if (!reportDir.exists()) {
			System.out.println("Creating report directory for :" + filenName);
			reportDir.mkdirs();
		}
	}

	private String getHostname() {
		String hostname = "unknown_host";
		if (isUnixLikeSystem()) {
			hostname = getHostnameFromHostnameCommand();
			if (hostname.equals("unknown_host")) {
				hostname = getHostnameFromJavaMethod();
			}

		} else {
			hostname = getHostnameFromJavaMethod();

			if (hostname.equals("unknown_host")) {
				hostname = getHostnameFromHostnameCommand();
			}
		}

		if (hostname.equals("unknown_host")) {
			System.out.println("ERROR: HOST NAME could not be retrieved from hostname command and from java method");
		}
		return hostname;
	}

	public boolean isUnixLikeSystem() {
		return System.getProperty("os.name").toLowerCase().contains("nux");
	}

	public String getHostnameFromHostnameCommand() {
		String hostname;

		try {
			hostname = execReadToString("hostname");
		} catch (IOException e) {
			System.out.println("HOST NAME could not be retrieved from hostname command");
			hostname = "unknown_host";
		}

		return hostname.trim();
	}

	public String execReadToString(String execCommand) throws IOException {
		try (Scanner s = new Scanner(Runtime.getRuntime().exec(execCommand).getInputStream()).useDelimiter("\\A")) {
			return s.hasNext() ? s.next() : "";
		}
	}

	public String getIP() {
		String hostIP = "0.0.0.0";
		try {
			InetAddress addr = getLocalHostLANAddress();
			String hostIPaddr = addr.getHostAddress();
			if (hostIPaddr != null && !hostIPaddr.isEmpty())
				hostIPaddr = hostIPaddr.substring(0, Math.min(hostIPaddr.length(), 16));
			hostIP = addr.getHostAddress();
		} catch (Exception e) {
			System.out.println("ERROR: HOST ADDRESS couldnot be retrieved , please check entries in /etc/hosts");
		}
		return hostIP;
	}

	private static InetAddress getLocalHostLANAddress() throws UnknownHostException {
		try {
			InetAddress candidateAddress = null;
			for (Enumeration ifaces = NetworkInterface.getNetworkInterfaces(); ifaces.hasMoreElements();) {
				NetworkInterface iface = (NetworkInterface) ifaces.nextElement();
				for (Enumeration inetAddrs = iface.getInetAddresses(); inetAddrs.hasMoreElements();) {
					InetAddress inetAddr = (InetAddress) inetAddrs.nextElement();
					if (!inetAddr.isLoopbackAddress()) {
						if (inetAddr.isSiteLocalAddress()) {
							if (inetAddr instanceof Inet4Address) {
								return inetAddr;
							} else {
								candidateAddress = inetAddr;
							}
						} else if (candidateAddress == null || candidateAddress instanceof Inet6Address) {
							candidateAddress = inetAddr;
						}
					}
				}
			}
			if (candidateAddress != null) {
				return candidateAddress;
			}
			InetAddress jdkSuppliedAddress = InetAddress.getLocalHost();
			if (jdkSuppliedAddress == null) {
				throw new UnknownHostException("The JDK InetAddress.getLocalHost() method unexpectedly returned null.");
			}
			return jdkSuppliedAddress;
		} catch (Exception e) {
			UnknownHostException unknownHostException = new UnknownHostException(
					"Failed to determine LAN address: " + e);
			unknownHostException.initCause(e);
			throw unknownHostException;
		}
	}

	public String getHostnameFromJavaMethod() {
		String hostname;

		try {
			InetAddress addr = InetAddress.getLocalHost();
			hostname = addr.getHostName();
		} catch (Exception e) {
			System.out.println("HOST NAME couldnot be retrieved from /etc/hosts, start check with hostname command");
			hostname = "unknown_host";
		}

		return hostname;
	}

	public void writeLine(String filePath, String version, Boolean potential) {
		String classification = "-";
		if (potential != null) {
			classification = potential ? "Potential" : "Definitive";
		}
		ArrayList<String> reportLine = new ArrayList<String>();
		reportLine.add(this.blueId);
		reportLine.add(this.hostname);
		reportLine.add(this.ipAddr);
		reportLine.add(filePath);
		reportLine.add(version);
		reportLine.add(this.OSName);
		reportLine.add(classification);
		this.reportFileWriter.println(String.join(",", reportLine));
		if(sensitiveData) {
			if(redactHostname) {
				reportLine.set(1, "redacted");
			}
			if(redactIP) {
				reportLine.set(2, "redacted");
			}
			this.sensReportFileWriter.println(String.join(",", reportLine));
		}
	}

	public void writeHeaders() {
		this.reportFileWriter.println(String.join(",", headers));
		if (sensitiveData) {
			sensReportFileWriter.println(String.join(",", headers));
		}
	}

	public void close() throws IOException {
		reportFileWriter.close();
		if (sensitiveData) {
			sensReportFileWriter.close();
		}
	}

}
